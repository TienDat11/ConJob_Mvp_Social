generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  posts                 Post[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  createdAt DateTime @default(now())

  @@index([username])
  @@index([email])
  @@index([googleId])
  @@index([createdAt])
  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@map("posts")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([type])
  @@map("post_media")
}

model Like {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("likes")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([postId])
  @@index([createdAt])
  @@map("comments")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@index([recipientId])
  @@index([issuerId])
  @@index([postId])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
